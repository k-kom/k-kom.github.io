{:title "re-frame application state memo"
 :layout :post
 :tags  ["re-frame" "clojurescript" "state" "memo"]
 :toc false
}

:toc: left
:toclevels: 2
:toc-title: 目次


== re-frame memo
*UNFINISHED*

re-frame docs/ApplicationState のメモ (不完全な和訳) です。

https://github.com/day8/re-frame/blob/851f77b6a3fa347bfb42d4e7f81d0163773ccc06/docs/ApplicationState.md

== Application State

[quote, Fogus, 'https://twitter.com/fogus/status/454582953067438080[April 11, 2014]']
____
Well-formed Data at rest is as close to perfection in programming as it gets. All the crap that had to happen to put it there however... 
____


=== The Big Ratom
re-frame はすべての application state を `app-db` と呼ばれる一つの場所におきます。

理想的にはこの一か所に集められたデータに対して http://clojure.org/about/spec[powerful で leverageable な schema を使って] spec を与えるべきです。

このアドバイスは 'real' なデータベースに対する物としては少しも議論の余地がないのではないでしょうか。 PostgreSQL には喜んで正しい (well-formed) データを保存すると思います。

ただメモリにある稼働中のアプリケーションにそれを適用するのは少し躊躇するかもしれません。 あなたが OO のバックグラウンドを持っている場合、 データを一か所にまとめる方法はとっっっても受け入れ難いでしょう。 あなたはシステムを小さな部品に分解して、 振る舞いをもとに組織し、 状態を隠そうとすることに時間を費やしてきたと思います。 私はまだ、 Clojure のデータがそこら辺に公開されていて受動的であることを考えて、 汗だくになって目を覚ますことがあります。

でも Fogus が気づかせてくれたように、 データをそのままにしておくのは完全に正しい (data at rest is quite perfect) です。

re-frame では `app-db` がそのようなものの一つです。

[source,clojure]
----
(def app-db  (reagent/atom {}))    ;; map を保持した Reagent の atom
----

これは `Reagent atom` (これ以降 `ratom` とします) ですが、 これをインメモリのデータベースと考えたほうがいいです。 これは構造を持ったデータを含んでいます。 そのデータにクエリする必要があるでしょう。 このデータに CRUD やそのほかの変換を実行する必要があるでしょう。 このデータベースがアトミックに処理して欲しいと思うでしょう。 だから "in-memory database" は昔ながらの atom 内の map よりもより有益なパラダイムだと思います。

また補足として以下のものをあげておきます。

1. `app-state` がより正確な名前でしょうが、 インメモリデータベースの考え方をできるかぎり強く伝えられるように、 `app-db` という名前にしました
1. ドキュメントとコードの中では、 `app-db` (`ratom`) と `db` (map) を区別しました。 後者は `ratom` *の中* に保持されている `value` です。 コードを読むときにこの名前に注意してください。
1. re-frame は内部で `app-db` を作成して管理してくれます。 なので明示的に宣言する必要はありません (`app-db` が保持する値を知りたい場合は https://github.com/day8/re-frame/blob/master/docs/FAQs/Inspecting-app-db.md[最初の FAQ] を見てください) 。
1. `app-db` は map を保持する `ratom` である必要はありません。 例えば https://github.com/tonsky/datascript[datascript database] でもあり得ます。 実際、 変更があったときにそれを通知できるデータベースであればなんでもいいです。 https://github.com/tonsky/datascript[datascript database] を使いたい (めっちゃかっこいいから) のはやまやまですが、 我々のアプリケーションはデータを持ちすぎています。 もし使うつもりなら re-frame を微調整して、 https://github.com/mpdairy/posh[Posh] を使ってください。

=== The Benefits Of Data-In-The-One-Place

TBD

=== Create A Leveragable Schema

TBD

=== How do I inspect it?
https://github.com/day8/re-frame/blob/master/docs/FAQs/Inspecting-app-db.md[FAQ #1 をみてください] 。