{:title "re-frame memo"
 :layout :post
 :tags  ["re-frame" "clojurescript" "memo"]
 :toc false
}

:toc: left
:toclevels: 2
:toc-title: 目次


== re-frame memo
re-frame README のメモ (不完全な和訳) です。
https://github.com/day8/re-frame

== 6-dominos
re-frame は 6 つのドミノで構成されています。
effect handling までが前半、 残りが後半という分類になっていて、 前半が `app state` を更新するところ、 後半が react を使った view の更新となっています。

1. Domino 1: Event dispatch
    * 何かが起きたときに event が発火されます (user interaction or websocket receives new message)
    * event が trigger されないと残りのドミノはおきません
1. Domino 2: Event handling
    * event に対して何をするかアプリケーションが判断することを `event handling` といいます
    * 実体は必要な `side effects` を宣言的に記述する関数のことです
    * application state を変更するのがよくある `side effect` ですが、 localstore や cookie を変更したりなどもあり得ます
1. Domino 3: Effect handling
    * 前のステップで返された `side effects` が実行されます
    * ここで `app state` が更新されて残りのカスケードを起こします
1. Domino 4: Query
    * `app state` からデータを抜き出して、 view function (ドミノ5) にわたします
    * react-redux でいうと、 query function は `mapStateToProps` にあたります
1. Domino 5: View
    * Reagent components でユーザーに見せるべき UI DOM を計算します
1. Domino 6: Dom
    * ここは Reagent/React によって処理されるのでコードを書く必要はありません
    * ブラウザの DOM が実際に変更されて画面上で可視化されます



== Managing mutation
1-2-3 と 4-5-6 は似た構造を持っています。 最後から二番目が mutation に必要な "data description" を計算して、 最後がダーティーワークをしてくれます。 最後のドミノはどちらも re-frame が処理してくれます。

基本的に、 アプリケーションの開発者は pure function を書いておけばいいです。 

== The Dominoes Again - With Code Fragments
今までの説明は概要の概要くらいだったので、 これからは code fragment とともにもう一度 6 domioes を見ていきます。 とはいえまだ概要なのでコードを完全に理解する必要はありません (後で説明します) 。

*Imagine*: アイテムのリストを表示する SPA に取り組んでいます。 今三番目のアイテムの "delete" ボタンをクリックしました。

=== Code For Domino 1
"delete" ボタンは以下のような view function でレンダーされているとします。

[source,clojure]
----
(defn delete-button 
  [item-id]
  [:div.garbage-bin 
     :on-click #(re-frame.core/dispatch [:delete-item item-id])])
----

* `on-click` handler は re-frame の `disptach` を使って `event` を発火しています
* re-frame の `event` は vector で、 ここでは二つの要素を持っています: `[:delete-item 2486]`
    * `2486` は三つ目のアイテムを示す適当な id です
* `event` の最初の要素は event の種類で、 残りは optional です
* `event` はドメイン固有の _意図_ を表します

=== Code For Domino 2
`event handler` 関数 (ここでは `h` とします) は event `[:delete-item 2486]` に対する `effetc` を計算するために呼ばれます。 アプリケーションの起動時に、 `re-frame.core/reg-event-fx` が `h` を `:delete-item` event の handler として登録することになっています。

[source,clojure]
----
(re-frame.core/reg-event-fx   ;; re-frame の API
  :delete-item                ;; event の種類
  h)                          ;; この event の handler
----

`h` は以下の 2 つの引数を持っています。

1. `coffect` の map で、 app state を含んだ世界の今の状態を持っています
1. ハンドルする event (vector)

`h` は発生した event によって世界がどのように変わるべきか記述する責務を持っていて、 `effetcs` の map を返します。 `effects` はそのような変更の記述です。

[source,clojure]
----
(defn h                               ;; `delete-item` みたいな名前の方がいい
 [coeffects event]                    ;; `coeffects` は現在の世界の状態を持っています
 (let [item-id (second event)         ;; event vector から id を抜き出します
       db      (:db coeffects)]       ;; アプリケーションの現在の状態を抜き出します　
   {:db  (dissoc-in db [:items item-id])})) ;; effect: "アプリケーションの状態を ... に変更する"
----

後述しますが、 re-frame には、 必要な世界の側面 (necessary aspects of the world) を `coeffects` に挿入する手段があります。 event handler によっては application state 以外のものを必要としていることがあるからです。 ここでは application state をいつも必要なものとしてとらえています。 application state はデフォルトの `:db` key が振られています。

destructuring を使った idimatic (clojure's) な `h` は以下のようになります。

[source,clojure]
----
(defn h 
  [{:keys [db]} [_ item-id]]    ;; new: db と id を直接取る (let を使わない)
  {:db  (dissoc-in db [:items item-id])}) ;; ここは前と一緒
----

=== Code For Domino 3
`effect handler` 関数は、 `h` が返した `effects` を実行します。 `h` は以下のようなものを返しました。

[source,clojure]
----
{:db  (dissoc-in db [:items 2486])}   ;; db はなんらかの構造を持った map
----

この map のそれぞれの key は特定の種類の `effect` を表し、 その value はその詳細を表します。 `h` が返したマップは一つの key (:db) しかないので、 ここでは一つの `effect` だけが表されています。

`:db` key はアプリケーションの状態を value で更新することを表します。 "app state" に対する更新は mutative な step で、 re-frame 組み込みの `:db` 用 `effect handler` によって容易に実行されます。

`:db` という名前は re-frame が "app state" を in-memory データベースのように考えているところから来ています。 詳細はあとのチュートリアルで説明します。

もし `h` が以下のような map を返したとします。

[source,clojure]
----
{:wear  {:pants "velour flares"  :belt false}
 :tweet "Okay, yes, I am Satoshi. #coverblown"}
----

この場合は `:wear` と `:tweet` 用に register された effect handler が呼ばれます。 どちらも re-frame 組み込みではないので、 自分で実装する必要があります。

=== Code For Domino 4
domino 3 で "app state" が更新されているので、 ここからは view の更新に入ります。 この domino 4 では、 query 関数が app state からデータを抜き出して、 "materialized view" を計算します。 この値は domino 5 の関数のために作成します。

今の例では query function は大したことをしません。 ただ app stae からアイテムのリストを抜き出すだけです。

[source,clojure]
----
(defn query-fn
  [db v]         ;; db は今の app state で v は query vector
  (:items db))   ;; not much of a materialised view
----

アプリケーションの起動時に `query-fn` は `query-id` と関連づけられている必要があります。 この関連付けによって、 domino 5 の `subscribe` で使えるようになります。

[source,clojure]
----
(re-frame.core/reg-sub  ;; re-frame API
   :query-items         ;; query id  
   query-fn)            ;; query fn
----

このコードは、 "domino 5 で `(subscribe [:query-items])` を見たら、 その計算のために `query-fn` を使え" と言っています。

=== Code For Domino 5
`:query-items` に対する query function は新しい値を計算するだけなので、 `(subscribe [:query-items])` を使っているどんな関数も DOM を再計算するために自動的に呼ばれる必要があります。

view function は hiccup format で記述された必要な DOM ノードを記述したデータ構造を計算する必要があります。 ここでの "items" の場合は、 view function が今消されたアイテムを生成するわけではありませんが、 それ以外は、 hiccup の計算する "this time" は "last time" と同じになります。

[source,clojure]
----
(defn items-view
  []
  (let [items  (subscribe [:query-items])]  ;; app state から取得した元ネタとなる (sourced) items
    [:div (map item-render @items)]))   ;; item-render はすでに書かれているとしてください
----

`re-frame.core/subscribe` を使って `items` が "app state" からどのように "source" されるかに気をつけてください。 `subscribe` は vector を引数にとって呼ばれ、 その一つ目の要素は query-id です。 これはこの view が必要とする "materialised view" です。

Note: `subscribe` クエリはパラメタライズできるので、 実際のアプリケーションでは `(subscribe [:items "blue"])` のようになるかもしれません。

vector は最初に query を特定し、 それ以降の引数を渡します。 これは SQL の `select * from Items where colour="blue"` のようだと考えることもできます。

実際には SQL は使えませんし、 "where" 引数をハンドリングできるような `query-fn` を実装するのはあなたになるかもしれません。 詳細は以降のチュートリアルで扱います。

=== Code For Domino 6
view function が返した hiccup のデータは、 Reagent/React によってブラウザの DOM に変換されます。 ここであなたはコードを書く必要はなくて、 ただ起きるだけです。

"this time" に計算された DOM は、 消された DOM がなくなっているということ以外は "last time" の DOM と同じです。 なのでここでの mutation はなくなってしまった DOM ノードをブラウザから削除することになります。

=== 3-4-5-6 Summary
3-4-5-6 の例を理解する重要な点は以下になります

* app state が変更され、
* それが query function の再実行を発火し、
* それが view function の再実行を発火し、
* ブラウザ DOM の変更を引き起こします


=== Aaaaaand we're done
ここで re-frame のアプリケーションは停止状態に戻って、 次のイベントを待つ状態になります。

== So, your job is...
re-frame のアプリケーションを作るとき、 あなたは以下のことをします。

* アプリケーションの information model を作成します (data と schema のレイヤー)
* event handler fucntion を書いて登録します (control と transition のレイヤー) (domino 2)
* (めったにない) effect と coeffect の handler を書いて登録します (domino 3) あんまり関わりたくない mutative なダーティーワークをする関数です
* signal graph 内のノードを実装する query function を書いて登録します (query レイヤー) (domino 4)
* Reagent の view function を書きます (view layer) (domino 5)